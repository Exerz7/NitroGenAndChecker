from datetime import datetime
import requests
import random
import itertools
import threading
import string
import time
import sys
import numpy as np
import pyfiglet
import os
import colorama
from colorama import Fore, Style, init,Back

os.system("CLS")

num = random.randint(10, 1000)


Attempts = 0
Hits = 0




def timer():
     t = time.localtime()
     current_time = time.strftime("%H:%M:%S", t)
    

def req():
    try:  # Check if the requrements have been installed
        from colorama import Fore, Style, init,Back  # Try to import colorama
    except ImportError:  # If it chould not be installed
        # Tell the user it has not been installed and how to install it
        input(
            f"Module colorama not installed, to install run '{'py -3' if os.name == 'nt' else 'python3.8'} -m pip install colorama'")
    try:  # Setup try statement to catch the error
        import requests  # Try to import requests
    except ImportError:  # If it has not been installed
        # Tell the user it has not been installed and how to install it
        input(
            f"Module requests not installed, to install run '{'py -3' if os.name == 'nt' else 'python3.8'} -m pip install requests'\nPress enter to exit")
        exit()  # Exit the program
    try:  # Setup try statement to catch the error
        import numpy  # Try to import requests
    except ImportError:  # If it has not been installed
        # Tell the user it has not been installed and how to install it
        input(
            f"Module numpy not installed, to install run '{'py -3' if os.name == 'nt' else 'python3.8'} -m pip install numpy'\nPress enter to exit")
        exit()  # Exit the program

colorama.init(convert=True)
HEADER = {'User-Agent': 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.7) Gecko/2009021910 Firefox/3.0.7'}

#animations
animation = ["[■□□□□□□□□□]","[■■□□□□□□□□]", "[■■■□□□□□□□]", "[■■■■□□□□□□]", "[■■■■■□□□□□]", "[■■■■■■□□□□]", "[■■■■■■■□□□]", "[■■■■■■■■□□]", "[■■■■■■■■■□]", "[■■■■■■■■■■]"]


def printSlow(text):
    for char in text:
        print(char, end="")
        sys.stdout.flush()
        time.sleep(.01)

def proxy_scrapehttp():
    temp = os.getenv("temp")+"\\proxies78.txt"
    r = requests.get("https://api.proxyscrape.com/v2/?request=getproxies&protocol=http&timeout=50&country=all&ssl=no&anonymity=elite&simplified=true",headers=HEADER)
    with open(temp, "wb") as f:
        f.write(r.content)
  
    


def httpproxy():
    temp = os.getenv("temp") + "\\proxies78.txt"
    if not os.path.exists(temp):
        with open(temp, "w") as f:
            f.close()
    if os.stat(temp).st_size == 0:
        proxy_scrapehttp()
    proxies = open(temp).read().split('\n')
    proxy = proxies[1]

    with open(temp, 'r+') as fp:
        lines = fp.readlines()
        fp.seek(0)
        fp.truncate()
        fp.writelines(lines[1:])
    return proxy

for i in range(10):
    time.sleep(0.4)
    sys.stdout.write(f"\r{Fore.BLUE}[SERVER]{Fore.GREEN} Running Lastest from BruteX!  " + animation[i % len(animation)])
    sys.stdout.flush()

os.system("CLS")

threading.Thread(target=req()).start()
threading.Thread(target=proxy_scrapehttp()).start()
os.system(f"title  BFX - [USER{num}] Hits: {Hits} Miss: {Attempts}")
print(f"""{Fore.MAGENTA}
________              _____     __________                       ____  __
___  __ )__________  ___  /________  ____/_________________________  |/ /
__  __  |_  ___/  / / /  __/  _ \_  /_   _  __ \_  ___/  ___/  _ \_    / 
_  /_/ /_  /   / /_/ // /_ /  __/  __/   / /_/ /  /   / /__ /  __/    |  
/_____/ /_/    \__,_/ \__/ \___//_/      \____//_/    \___/ \___//_/|_|  

{Fore.YELLOW}Connected as {Fore.RED}[USER{num}]{Fore.RESET}
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

""")



def generatecodes():
    Attempts = 0
    Hits = 0
    proxo = httpproxy()
    proxies = {
        "http": proxo
    }
    while 1:
        t = time.localtime()
        current_time = time.strftime("%H:%M:%S", t)
        nitro = random.randint(100000, 4000000)
        code = ("".join(random.choices(string.ascii_uppercase + string.digits + string.ascii_lowercase, k=16)))
        url = "https://discordapp.com/api/v9/entitlements/gift-codes/" + code + "?with_application=false&with_subscription_plan=true"
        nitrourl = "https://discord.gift/" + code

        request = requests.get(url, proxies=proxies, headers=HEADER)

        if request.status_code == 429:
            print(f"{Fore.BLUE}[{Fore.YELLOW}-{Fore.BLUE}]{Fore.CYAN} BruteForceX hit the ratelimit,{Fore.YELLOW} Less Than a Minute Remains!{Fore.RESET}")
            print(f"{Fore.BLUE}[{Fore.YELLOW}#{Fore.BLUE}]{Fore.CYAN} Nitro Codes to Snipe: {Fore.YELLOW}[{nitro}]{Fore.RESET}")
            time.sleep(65)                                            
            proxy_scrapehttp()
            proxo = httpproxy()
            proxies = {
                "http": proxo,
            }
        elif request.status_code == 200:
            print(np.array(f"{Fore.BLUE}[{Fore.YELLOW}+{Fore.BLUE}] {Fore.MAGENTA}[{current_time}]{Fore.GREEN} [VALID]{Fore.MAGENTA} >> {Fore.YELLOW}" + nitrourl))
            Hits += 1
            os.system(f"title  BFX - [USER{num}] Hits: {Hits} Miss: {Attempts}")
            with open("Hits.txt", "w", encoding='utf-8') as file:
               file.write(f"{nitrourl}\n")
        else:
            print(f"{Fore.BLUE}[{Fore.YELLOW}+{Fore.BLUE}] {Fore.MAGENTA}[{current_time}]{Fore.RED} [MISS]{Fore.MAGENTA} >> {Fore.GREEN}" + nitrourl)
            Attempts += 1
            os.system(f"title  BFX - [USER{num}] Hits: {Hits} Miss: {Attempts}")

threadsnumber = 1

for i in range(threadsnumber):
        threading.Thread(target=generatecodes).start()


